// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Administrador {
  id_admin  Int      @id @default(autoincrement())
  nome      String
  email     String   @unique
  senha     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Disciplina {
  id_disciplina Int         @id @default(autoincrement())
  nome          String
  professores   Professor[] @relation("DisciplinaProfessores")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Professor {
  id_prof       Int        @id @default(autoincrement())
  nome          String
  email         String     @unique
  senha         String
  id_disciplina Int
  disciplina    Disciplina @relation("DisciplinaProfessores", fields: [id_disciplina], references: [id_disciplina], onDelete: Cascade)
  aulas         Aula[]     @relation("ProfessorAulas")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Sala {
  id_sala   Int      @id @default(autoincrement())
  nome      String
  turmas    Turma[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Turma {
  id_turma  Int      @id @default(autoincrement())
  ano       DateTime
  id_sala   Int
  sala      Sala     @relation(fields: [id_sala], references: [id_sala])
  alunos    Aluno[]
  aulas     Aula[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aluno {
  id_aluno  Int       @id @default(autoincrement())
  nome      String
  email     String    @unique
  senha     String
  id_turma  Int
  turma     Turma     @relation(fields: [id_turma], references: [id_turma])
  chamadas  Chamada[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Aula {
  id_aula   Int       @id @default(autoincrement())
  dia       DateTime
  id_prof   Int
  professor Professor @relation("ProfessorAulas", fields: [id_prof], references: [id_prof])
  id_turma  Int
  turma     Turma     @relation(fields: [id_turma], references: [id_turma])
  chamadas  Chamada[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Chamada {
  id_chamada    Int      @id @default(autoincrement())
  situacao      Boolean
  justificativa String?
  id_aluno      Int
  aluno         Aluno    @relation(fields: [id_aluno], references: [id_aluno], onDelete: Cascade)
  id_aula       Int
  aula          Aula     @relation(fields: [id_aula], references: [id_aula], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
